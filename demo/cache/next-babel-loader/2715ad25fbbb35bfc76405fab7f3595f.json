{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createFactory } from \"../createFactory\";\nimport { getDisplayName } from \"../displayName\";\nexport const nest = (...Components) => {\n  const factories = Components.map(createFactory);\n\n  const Nest = (_ref) => {\n    let {\n      children\n    } = _ref,\n        props = _objectWithoutProperties(_ref, [\"children\"]);\n\n    return factories.reduceRight((child, factory) => factory(props, child), children);\n  };\n\n  if (false) {\n    const displayNames = Components.map(getDisplayName);\n    Nest.displayName = `nest(${displayNames.join(\", \")})`;\n  }\n\n  return Nest;\n};","map":null,"metadata":{},"sourceType":"module"}